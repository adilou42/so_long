
int	handle_keyrelease(void	*data)
{
	(void)data;
	return (0);
}

int	handle_no_event(void *data)
{
	(void)data;
	return (0);
}

int	handle_input(int keysym, t_data *data)
{
	if (keysym == XK_Escape)
		mlx_destroy_window(data->mlx_ptr, data->win_ptr);
	return (0);
}

int i, j;
	i = 0;
	
	while (i < 1000)
	{
		j = 0;
		while (j < 500)
		{
			my_mlx_pixel_put(&img, j, i, 0x00FF0000);
			j++;
		}
		i++;
	}

img.img = mlx_new_image(data.mlx_ptr, 1920, 1080);
img.addr = mlx_get_data_addr(img.img, &img.bits_per_pixel, &img.line_length, &img.endian);

mlx_hook(data.win_ptr, KeyRelease, KeyReleaseMask, &handle_keyrelease, &data);

	mlx_put_image_to_window(data.mlx_ptr, data.win_ptr, img.img, 0, 0);


data.img.mlx_img = mlx_new_image(data.mlx_ptr, 1000, 500);
	data.img.addr = mlx_get_data_addr(data.img.mlx_img, &data.img.bpp,
			&data.img.line_len, &data.img.endian);

int	render(t_data *data)
{
	if (data->win_ptr == NULL)
		return (1);
	// render_background(&data->img, 0xFFFFFF);
	// render_rect(&data->img, (t_rect){900, 400, 100, 100, 0x00FF00});
	// render_rect(&data->img, (t_rect){0, 0, 100, 100, 0xFF0000});

	// mlx_put_image_to_window(data->mlx_ptr, data->win_ptr, data->map.floor, 0, 0);

	data->map.floor = mlx_xpm_file_to_image(data->mlx_ptr, "./assets/floor.xpm", &data->map.height, &data->map.width);
	data->map.wall = mlx_xpm_file_to_image(data->mlx_ptr, "./assets/wall.xpm", &data->map.height, &data->map.width);
	render_wall(data);
	return (0);
}


if (mlx.win_ptr == NULL)
	{
		free(mlx.win_ptr);
		return (0);
	}